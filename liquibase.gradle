import org.gradle.internal.os.OperatingSystem


//def springProp = file('src/main/resources/application.properties')

def appProps = new Properties()
file("src/main/resources/application.properties").withInputStream {
	stream -> appProps.load(stream)
} 


configurations {
    liquibase
}


if (OperatingSystem.current().isWindows()) {
    task pathingLiquibaseJar(type: Jar) {
        dependsOn configurations.liquibase
        appendix = 'pathingLiquibase'

        doFirst {
            manifest {
                attributes 'Class-Path':
                    sourceSets.main.runtimeClasspath.plus(configurations.liquibase)
                    .collect {
                        it.toURL().toString().replaceFirst(/file:\/+/, '/')
                    }.join(' ')
            }
        }
    }
}

task liquibaseDiffChangelog(dependsOn: compileJava, type: JavaExec) {
    group = "liquibase"

    if (OperatingSystem.current().isWindows()) {
        dependsOn pathingLiquibaseJar
        doFirst {
            classpath = files(pathingLiquibaseJar.archivePath)
        }
    } else {
        classpath sourceSets.main.runtimeClasspath
        //classpath configurations.liquibase
    }
    main = "liquibase.integration.commandline.Main"

    args "--changeLogFile=src/main/resources/DB/changelog/db.changelog-" + buildTimestamp() + ".yml"
    args "--referenceUrl=hibernate:spring:com.future.bbetter?dialect=org.hibernate.dialect.MySQL5InnoDBDialect&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy"
    args "--username=" + appProps.get("spring.datasource.username")
    args "--password=" + appProps.get("spring.datasource.password")
    args "--url=" + appProps.get("spring.datasource.url")
    args "--driver=" + appProps.get("spring.datasource.driver-class-name")
    args "diffChangeLog"
}

def buildTimestamp() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}
